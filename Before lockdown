# Packages
library(tidyverse)
library(deSolve)
library(tidyr)
library(kableExtra)

# Lebanon COVID-19 data 
cases <- read.csv("C:/Users/farah/Desktop/SIRPrevData.csv")
N <- 6850000 # pupulation of Lebanon

# Lebanon now
ggplot(data = cases) +
  geom_point(aes(x = time, y = I, color = "Daily cases")) +
  geom_line(aes(x = time, y = cum_I, color = "Total cases"), lwd = 1) +
  scale_color_manual(name = " ",
                     values = c("red", "forest green")) +
  geom_vline(aes(xintercept = 25), color = "dimgray", linetype = "dashed") +
  geom_text(aes(x = 14, y = 600, label = "Full lockdown")) +
  labs(x = " ",
       y = "Days",
       title = "Total and daily cases in Lebanon as of
       April 17, 2020") +
  theme_minimal()
  
# Before lockdown
cases <- cases %>% 
  rename(day = time,
         infected = I) %>% 
  filter(day < 30) 

# SIR model
SIR <- function(time, state, parameters) {
  par <- as.list(c(state, parameters))
  with(par, {
    dS <- -beta * I * S / N
    dI <- beta * I * S / N - gamma * I
    dR <- gamma * I
    list(c(dS, dI, dR))
  })
}

# now specify initial values for N, S, I and R
init <- c(S = N - cases$infected[1],
          I = cases$infected[1],
          R = 0) # change name of init and indices

# define a function to calculate the residual sum of squares
# (RSS), passing in parameters beta and gamma that are to be
# optimised for the best fit to the incidence data
RSS <- function(parameters) {
  names(parameters) <- c("beta", "gamma")
  out <- ode(y = init, times = cases$day, func = SIR, parms = parameters)
  fit <- out[, 3]
  sum((cases$infected - fit)^2)
}

# now find the values of beta and gamma that give the
# smallest RSS, which represents the best fit to the data.
# Start with values of 0.5 for each, and constrain them to
# the interval 0 to 1.0
Opt <- optim(c(0.5, 0.5),
             RSS,
             method = "L-BFGS-B",
             lower = c(0, 0),
             upper = c(1, 1))

# check for convergence
Opt$message

Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par

R0 <- as.numeric(Opt_par[1] / Opt_par[2])
R0

# get the fitted values from our SIR model
fitted_cumulative_incidence <- data.frame(ode(
  y = init, times = cases$day,
  func = SIR, parms = Opt_par))

# plot the data
ggplot() +
  geom_line(data = fitted_cumulative_incidence, aes(x = time, y = I, color = "Predicted")) +
  geom_point(data = cases, aes(x = day, y = infected, color = "Observed")) +
  labs(x = "Days since 20 February 2020",
       y = " ",
       title = "Observed and predicted number of cases 
       until 20 March 2020") +
  scale_color_manual(name = " ",
                     values = c("red", "forest green")) +
  theme_minimal()

# what if we didn't close down on 15 March 2020 
fitted_cumulative_incidence_bad <- data.frame(ode(
  y = init, times = 1:210,
  func = SIR, parms = Opt_par
))

# 84,458 infected as of 16 April 2020 if full lockdown had not been implemented
ggplot() +
  geom_line(data = fitted_cumulative_incidence_bad, aes(x = time, y = I, color = "Predicted"), lwd = 1) +
  geom_point(data = cases, aes(x = day, y = infected, color = "Observed")) +
  labs(x = "Days since 20 February 2020",
       y = "Daily number of cases",
       title = "Predicted cases if full lockdown had not been 
       implemented on 15 March 2020") +
  scale_color_manual(name = " ",
                     values = c("red", "forest green")) +
  geom_hline(aes(yintercept = round(max(fitted_cumulative_incidence_bad$I))), color = "dimgray") +
  geom_vline(aes(xintercept = 128), color = "dimgray") +
  annotate("segment", x = 45, xend = 62, y = 20000, yend = 800, colour = "red", size=1, alpha=0.6, arrow=arrow()) +
  geom_text(aes(74, 28000, label = "April 21"), vjust = 0.75, hjust = 1.2) +
  ylim(0, 150000) +
  xlim(0, 220) +
  theme_minimal()

# peak of pandemic
fitted_cumulative_incidence_bad[fitted_cumulative_incidence_bad$I == max(fitted_cumulative_incidence_bad$I), c("time", "I")]

# severe cases
max_infected <- max(fitted_cumulative_incidence_bad$I)
round(max_infected * 0.2)

# cases with need for intensive care
round(max_infected * 0.06)

# deaths with supposed 0.7% fatality rate
round(max_infected * 0.031)

# total cases
sum(fitted_cumulative_incidence_bad$I)

# total severe cases
sum(fitted_cumulative_incidence_bad$I) * 0.20

# total cases needing ICU
sum(fitted_cumulative_incidence_bad$I) * 0.06

# total deaths
sum(fitted_cumulative_incidence_bad$I) * 0.031
